#!/usr/bin/env python

import os
import sys
import argparse
REPO_COLOR = '\033[95m'
DASH_COLOR = '\033[91m'
COLOR_STOP = '\033[0m'

def main():
	# Command argument parsing
	parser = argparse.ArgumentParser(
		description="Perform a git command on multiple git repositories in subfolders",
		epilog="NOTE: --quiet and --verbose cancel out each other. e.g. '-qqv' = '-q'")
	parser.add_argument('-n', '--noseparator', dest='sep', action='store_false', default=True, 
		help='Suppress printing of separator line between repositories.')
	parser.add_argument('-q', '--quiet', action="count", default=0, 
		help="decrease output verbosity. Repeat for more silence, or to cancel out -v")
	parser.add_argument('-v', '--verbose', action="count", default=0, 
		help="increase output verbosity. Repeat for more noise, or to cancel out -q")
	parser.add_argument('command', metavar='command', type=str, nargs=argparse.REMAINDER, 
		help="The git command to perform on each repository. I.e. the part usually put after 'git'")
 	args = parser.parse_args()
	verbosity = 0 - args.quiet + args.verbose
	#args = vars(parser.parse_args())
	if not any(args.command):
	    parser.error('No arguments provided.')

	gitcommand = 'git ' + ' '.join(args.command)

	if verbosity>=0:
	    def _verboseprint(*args):
	    	for arg in args:
	    		print arg,
	    	print
	else:   
	 	 _verboseprint = lambda *a: None

	global verboseprint
	verboseprint = _verboseprint

	if verbosity>=0:
	    def v(txt):
	    	return txt
	else:   
	    def v(txt):
	    	return ''

	printDelimiter(args.quiet==0 and args.sep)

	verboseprint('Running command:', gitcommand)

	localDir = os.path.abspath('.')
	verboseprint('gitall started in: ',localDir)
	printDelimiter(args.quiet==0 and args.sep)

	# get a list of git directories in the specified parent
	gitDirectories = getSubdirectories('.', isGitDirectory)

	for gitDirectory in gitDirectories:
		os.chdir(gitDirectory)
		if verbosity < -1:
			None
		elif verbosity < 0:
			print '['+pinkrepo+']'
		else: 
			print 'Current repo:',pinkrepo
		pinkrepo = REPO_COLOR + os.path.relpath(gitDirectory, localDir) + COLOR_STOP
		os.system(gitcommand)
		printDelimiter(verbosity >=0 and args.sep)


def getSubdirectories(directory, filter = None):
	directory = os.path.abspath(directory)
	subdirectories = os.walk(directory).next()[1]
	if filter is None:
		return [directory + '/' + i for i in subdirectories]
	else:
		return [directory + '/' + i for i in subdirectories if filter(directory + '/' + i)]

def isGitDirectory(directory):
	return os.path.isdir(directory + '/.git/')

def printDelimiter(show):
	if show:
		dashes = '-' * 80
		print DASH_COLOR + dashes + COLOR_STOP

if __name__ == '__main__':
	main()