#!/usr/bin/env python

import os
import sys
import argparse
REPO_COLOR = '\033[95m'
DASH_COLOR = '\033[91m'
COLOR_STOP = '\033[0m'

def main():
	# Command argument parsing
	parser = argparse.ArgumentParser(
		description="Perform a git operation on multiple git repositories in subfolders",
		epilog="NOTE: --quiet and --verbose cancel each other out one by one so '-qqv' gives the same result as '-q'")
	parser.add_argument('-i', '--include', metavar='include', type=str,
		help='Only operate on repositories listed in <file>.')
	parser.add_argument('-n', '--noseparator', dest='sep', action='store_false', default=True, 
		help='Suppress printing of separator line between repositories.')
	parser.add_argument('-q', '--quiet', action="count", default=0, 
		help="decrease output verbosity. Repeat for more silence, or to cancel out -v")
	parser.add_argument('-v', '--verbose', action="count", default=0, 
		help="increase output verbosity. Repeat for more noise, or to cancel out -q")
	parser.add_argument('-r', '--raw', action="store_true", 
		help="Treat the specified command as a 'full' command, i.e. not a git 'sub'-command. Example: gitall --raw cat .gitignore")
	parser.add_argument('operation', metavar='operation', type=str, nargs=argparse.REMAINDER, 
		help="The git operation to perform on each repository, i.e. the part usually put after 'git '. (unless running in --raw mode)")
 	args = parser.parse_args()
	if not any(args.operation):
	    parser.error('No arguments provided.')

	# handle verbosity
	global verbosity
	verbosity = 0 - args.quiet + args.verbose
	if verbosity<-4:
		print "If you want it THAT quiet, just pipe everything to /dev/null and be done with it!"

	#header printing
	commandstring = ' '.join(args.operation)
	if not args.raw:
		commandstring = 'git ' +  commandstring
	localDir = os.path.abspath('.')
	verboseprint(1, 'Running command:', commandstring)
	verboseprint(1, 'gitall started in: ',localDir)
	printDelimiter(args.quiet==0 and args.sep)

	# get a list of git directories in the specified parent
	if not args.include:
		gitDirectories = getSubdirectories('.', isGitDirectory)
	else:
		gitDirectories = getReposFromFile(args.include)

	for gitDirectory in gitDirectories:
		os.chdir(gitDirectory)
		pinkrepo = REPO_COLOR + os.path.relpath(gitDirectory, localDir) + COLOR_STOP
		repooutput = v(1, 'Current repo:') + (pinkrepo,) + v(2," in ( "+os.path.abspath('.')+" )")
		verboseprint(-1, *repooutput)
		os.system(commandstring)
		printDelimiter(verbosity >=0 and args.sep)

def verboseprint(fromlevel, *args):
	if verbosity >= fromlevel:
		for arg in args:
			print arg,
		print

def v(fromlevel, *args):
	if verbosity >= fromlevel:
		return args
	else:
		return ()

def getReposFromFile(file):
	gitDirectories = ""
	directory = os.path.abspath(".")
	return [directory + "/" + gitRepo.rstrip("\r\n") for gitRepo in open(file, 'r')]

def getSubdirectories(directory, filter = None):
	directory = os.path.abspath(directory)
	subdirectories = os.walk(directory).next()[1]
	if filter is None:
		return [directory + '/' + i for i in subdirectories]
	else:
		return [directory + '/' + i for i in subdirectories if filter(directory + '/' + i)]

def isGitDirectory(directory):
	return os.path.isdir(directory + '/.git/')

def printDelimiter(show):
	dash = '-'
	if verbosity > 2:
		dash = "#"
	if show:
		dashes = dash * 80
		print DASH_COLOR + dashes + COLOR_STOP

if __name__ == '__main__':
	main()